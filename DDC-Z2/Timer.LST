C51 COMPILER V9.51   TIMER                                                                 05/29/2014 15:12:34 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN Timer.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Timer.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*---------------------------------------------------
   2                  Timer.c (v1.00)
   3                  
   4                  Timer functions
   5          ---------------------------------------------------*/   
   6          
   7          #include "main.h"
   8          #include "port.h"
   9          
  10          #include "Timer.h"
  11          #include "communication.h"
  12          #include "voice.h"
  13          #include "Delay.h"
  14          #include "Battery.h"
  15          #include "AD.h"
  16          #include "Other.h"
  17          #include "operation.h"
  18          
  19          // ------ Public variable declarations -----------------------------
  20          bit stolen_alarm_flag = 0;                                      // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  21          bit host_stolen_speech_EN = 0;                  // when host been touch 3 times, enable 3rd alarm voice.
  22          bit battery_check=0;                                                    // 2ÖÃ1Ê±£¬Ö´ÐÐÒ»´ÎµçÁ¿×ª»»£¬Ö´ÐÐÍêºó£¬½«ÆäÖÃ0
  23          bit position_sensor_EN=0;               //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  24          bit slave_away_speech_EN=0;      //ÅÐ¶Ï¸½»úÀë¿ªºó£¬ÓïÒôÌáÊ¾£¬ÔÚmainÀïÃæ²Ù×÷
  25          bit magnet_CW_EN = 0;                                   //µç´ÅÌúË³Ê±Õë×ª¶¯Ê¹ÄÜ£¬×ª¶¯Ò»´Îºó¸´Î»Îª0
  26          bit magnet_ACW_EN=0;                                            //µç´ÅÌúÄæÊ±Õë×ª¶¯Ê¹ÄÜ£¬×ª¶¯Ò»´Îºó¸´Î»Îª0
  27          bit comm_whole_control=0;                               //Í¨ÐÅ×Ü¿ª¹Ø£¬0¹Ø±ÕÍ¨ÐÅ£¬1´ò¿ªÍ¨ÐÅ
  28          tWord host_stolen_speech_count=0;   //ÅÐ¶ÏÖ÷»ú±»µÁºó£¬ÓïÒôÌáÊ¾µÄ´ÎÊý
  29          bit slave_nearby_speech_EN=0;       //ÅÐ¶Ï¸½½ü¿¿½üºó£¬ÓïÒôÌáÊ¾£¬ÔÚmainÀïÃæ²Ù×÷
  30          bit host_stolen_alarm1_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  31          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  32          tByte host_stolen_alarm1_count = 0;             //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  33          tByte host_stolen_alarm2_count = 0;             //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  34          bit fell_flag=0;                                                //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  35          bit slave_away = 1;                                     // flag for slave, 1 means away, 0 means nearby
  36          tByte leave_count=0;                                    // increment every 2s, reset for every success communication
  37          bit raised_flag=0;                                      //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  38          tByte sensor_2ndstage_LV_time=0;        //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  39          tByte sensor_2ndstage_count = 0;                //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  40          tByte host_2ndtouch_speech_count = 0;           //Ö÷»ú±»µÚ¶þ´Î´¥Åöºó£¬ÓïÒôÌáÊ¾µÄ´ÎÊý
  41          tWord sensor_3rdstage_time = 0;                 //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  42          tByte sensor_3rdstage_effcount = 0;             //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  43          tByte sensor_3rdstage_count = 0;                        //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  44          tWord sensor_3rdstage_interval = 0;             //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  45          bit host_touch_speech_EN = 0;                           //µÚÒ»´Î´¥ÅöºóÓïÒôÊ¹ÄÜ
  46          bit host_2ndtouch_speech_EN = 0;                        //µÚ¶þ´Î´¥ÅöºóÓïÒôÊ¹ÄÜ
  47          bit raised_fell_flag = 0;                                       //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  48          tByte sensor_trigger_count=0;           //´«¸ÐÆ÷´¥·¢¼ÆÊý
  49          tWord sensor_2ndstage_time=0;           //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  50          tByte sensor_1ststage_count=0;  //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
  51          tByte nearby_away_interval = 0;         //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  52          bit magnet_ACW_flag=0;
  53          
C51 COMPILER V9.51   TIMER                                                                 05/29/2014 15:12:34 PAGE 2   

  54          // ------ Private variable definitions -----------------------------
  55          tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;               // register value of timer0 and timer1, caculated from 
             -InitTimer()
  56          
  57          tByte host_touch_speech_count=0;
  58          tByte host_touched_flag=0;                      //Ö÷»ú±»´¥ÅöºóÖÃ1£¬½øÐÐºóÃæµÄ´«¸ÐÆ÷ÅÐ¶Ï
  59          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  60          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  61          tWord timer0_count=0;           // counter for timer0, increment every ticket                   
  62          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};             //½ÓÊÕÊý¾Ý»º´æ
  63          bit receive_data_finished_flag = 0;             //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  64          tByte data_count = 0;                           //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  65          tByte one_receive_byte = 0;             //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  66          tByte one_receive_byte_count = 0;                       //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  67          bit receive_wire_flag = 1;              //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
  68          tByte receive_HV_count = 0;             //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  69          tByte receive_LV_count = 0;             //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  70          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  71          tByte raise_wire_time=0;                        //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  72          tWord raised_fell_number = 0;                           //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  73          bit raised_fell_once_flag = 0;                  //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  74          tByte key_rotated_on_flag=0;                    //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  75          tByte slave_nearby_speech_count=0;
  76          tByte slave_away_speech_count=0;
  77          tWord ADC_check_result = 0;             //×÷ÎªAD¼ì²âÖµ
  78          bit slave_nearby_EN = 0;                        // ×÷Îªslave¿¿½üºó²Ù×÷µÄÊ¹ÄÜ
  79          tByte slave_nearby_operation_count = 0; // ×÷Îªslave¿¿½üºó²Ù×÷µÄ´ÎÊý
  80          tByte wire_broken_count = 0;            // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  81          bit battery_stolen_EN = 0;                      // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  82          tByte battery_stolen_count = 0; // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  83          bit horizontal_vibration = 0;           // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  84          tWord horizontal_vibration_count = 0;   //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  85          bit vibration_flag = 0;
  86          tWord vibration_count = 0;
  87          bit sensor_3rdalarm_flag = 0;
  88          
  89          /*------------------------------------------------------------------
  90                  timerT0()
  91                  operation every ticket.
  92          --------------------------------------------------------------------*/
  93          
  94          void timer0() interrupt interrupt_timer_0_overflow
  95                  {
  96   1              // manually reload timer0 configuration
  97   1              TH0 = timer0_8H;
  98   1              TL0 = timer0_8L;
  99   1              
 100   1              // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 101   1              if(++timer0_count >= 2000)
 102   1                      {
 103   2                      // reset timer0 ticket counter every 2s
 104   2                      timer0_count=0;
 105   2                      
 106   2                      // detect the battery voltage
 107   2                      ADC_check_result = GetADCResult(6);     
 108   2                      }
 109   1                                                      
 110   1              // detect whether key is rotated on,  
C51 COMPILER V9.51   TIMER                                                                 05/29/2014 15:12:34 PAGE 3   

 111   1              if((key_rotate == 1)&&(key_rotated_on_flag == 0))               
 112   1                      {
 113   2                      Delay(5);
 114   2                      // anti-trigger, Delay(5) confirm the key rotation.
 115   2                      if(key_rotate == 1)
 116   2                              {
 117   3                              slave_nearby_operation();
 118   3                              // flag key rotation status
 119   3                              key_rotated_on_flag = 1;
 120   3                              }
 121   2                      } 
 122   1                      
 123   1              
 124   1              // detect whether key is rotated off
 125   1              if((key_rotate == 0)&&(key_rotated_on_flag == 1))
 126   1                      {
 127   2                      if(vibration_flag == 0)
 128   2                              {
 129   3                              Delay(5);
 130   3                              if(key_rotate == 0)
 131   3                                      {
 132   4                                      // handle with battery status
 133   4                                      verifybattery(ADC_check_result);
 134   4                                      // reset key rotation flag
 135   4                                      key_rotated_on_flag=0;
 136   4                                      
 137   4                                      slave_away_operation();
 138   4                                      }
 139   3                              }                               
 140   2                      }
 141   1              
 142   1              if(vibration_flag == 1)
 143   1                      {
 144   2                      if(++vibration_count > 2000)
 145   2                              {
 146   3                              vibration_flag = 0;
 147   3                              vibration_count = 0;
 148   3                              }
 149   2                      }
 150   1                      
 151   1              if((sensor_detect == 0)||(horizontal_sensor == 0))
 152   1                      {
 153   2                      vibration_flag = 1;
 154   2                      }
 155   1      
 156   1              // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 157   1              if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 158   1                      {
 159   2                      stolen_alarm_flag = 1;
 160   2                      if(key_rotate == 0)
 161   2                              {
 162   3                              stolen_alarm_speech1();
 163   3                              }
 164   2                      if(++host_stolen_alarm1_count >= 4)
 165   2                              {
 166   3                              host_stolen_alarm1_count = 0;
 167   3                              host_stolen_alarm1_EN = 0;
 168   3                              stolen_alarm_flag = 0;
 169   3                              sensor_3rdalarm_flag = 0;
 170   3                              }
 171   2                      }
 172   1              if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
C51 COMPILER V9.51   TIMER                                                                 05/29/2014 15:12:34 PAGE 4   

 173   1                      {
 174   2                      stolen_alarm_flag = 1;
 175   2                      if(key_rotate == 0)
 176   2                              {
 177   3                              stolen_alarm_speech2();
 178   3                              }
 179   2                      if(++host_stolen_alarm2_count >= 4)
 180   2                              {
 181   3                              host_stolen_alarm2_count = 0;
 182   3                              host_stolen_alarm2_EN = 0;
 183   3                              stolen_alarm_flag = 0;
 184   3                              sensor_3rdalarm_flag = 0;
 185   3                              }
 186   2                      }
 187   1                                      
 188   1      
 189   1              // judge host is fell or raised every 1ms?
 190   1              if(raised_fell_flag == 0)
 191   1                      {
 192   2                      // judge vibration sensor is enable?
 193   2                      if(sensor_EN == 1)      
 194   2                              {                       
 195   3                              // sensor trigger status, 0, 1 or 2?
 196   3                              switch(sensor_trigger_count)
 197   3                                      {
 198   4                                      // case 0, it means host is in waiting status. waiting for first touch.
 199   4                                      case 0:
 200   4                                              {
 201   5                                              
 202   5                                              // judge host been touched and also not in vibration alarm
 203   5      //                                      if((sensor_detect == 0)&&(stolen_alarm_flag == 0)&&(transmiter_EN == 1))                
 204   5                                              if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0))          
 205   5                                                      {
 206   6                                                      // judge LV is more than 2ms, if yes, it means a effective touch
 207   6                                                      if(++sensor_1ststage_count >= 2)                        
 208   6                                                              {
 209   7                                                              sensor_1ststage_count=0;
 210   7                                                              
 211   7                                                              // sensor trigge status progress to case 1.
 212   7                                                              sensor_trigger_count = 1;
 213   7                                                              // alarm speech for first touoch
 214   7                                                              host_touch_speech();
 215   7                           }
 216   6                                                      }
 217   5                                              else
 218   5                                                      {
 219   6                                                      // if no LV, reset the count.
 220   6                                                      sensor_1ststage_count = 0;
 221   6                                                      }
 222   5                                              }
 223   4                                      break;
 224   4                                      
 225   4                                      // waiting for next touch, 
 226   4                                      case 1:
 227   4                                              {
 228   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 229   5                                                      {
 230   6                                                      // LV for 2s, means a effective touch
 231   6                                                      if(++sensor_2ndstage_count >= 2)
 232   6                                                              {
 233   7                                                              sensor_2ndstage_count = 0;
 234   7                                                              sensor_trigger_count = 2;
C51 COMPILER V9.51   TIMER                                                                 05/29/2014 15:12:34 PAGE 5   

 235   7                                                              host_2ndtouch_speech_count = 0;
 236   7                                                              // alarm speech for 2nd touch
 237   7                                                              host_2ndtouch_speech();
 238   7                                                              }
 239   6                                                      }
 240   5                                              else
 241   5                                                      {
 242   6                                                      sensor_2ndstage_count = 0;
 243   6                                                      }
 244   5                                              
 245   5                                              // if there is no touch in 4s, reset sensor trigger status, etc.
 246   5                                              if(++sensor_2ndstage_time >= 4000)
 247   5                                                      {
 248   6                                                      sensor_trigger_count = 0;
 249   6                                                      sensor_2ndstage_count = 0;
 250   6                                                      sensor_1ststage_count = 0;
 251   6                                                      sensor_2ndstage_time = 0;
 252   6                                                      }
 253   5                                              }
 254   4                                      break;
 255   4                                      
 256   4                                      // waiting for 3rd touch
 257   4                                      case 2:
 258   4                                              {
 259   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 260   5                                                      {
 261   6                                                      // 2s LV is a effective touch
 262   6                                                      if(++sensor_3rdstage_count >= 2)
 263   6                                                              {
 264   7                                                              sensor_3rdstage_count = 0;
 265   7                                                              // stolen alarm speech enable
 266   7                                                              host_stolen_alarm1_EN = 1;
 267   7                                                              host_stolen_alarm2_EN = 1;      
 268   7                                                              sensor_3rdalarm_flag = 1;                                                       
 269   7                                                              }
 270   6                                                      }
 271   5                                              else
 272   5                                                      {
 273   6                                                      sensor_3rdstage_count = 0;
 274   6                                                      }
 275   5                                              
 276   5                                              // if there is no touch in 4s, reset all.
 277   5                                              if(++sensor_3rdstage_time >= 4000)
 278   5                                                      {
 279   6                                                      sensor_trigger_count = 0;
 280   6                                                      sensor_1ststage_count = 0;
 281   6                                                      sensor_2ndstage_count = 0;
 282   6                                                      sensor_2ndstage_time = 0;
 283   6                                                      sensor_3rdstage_time = 0;
 284   6                                                      sensor_3rdstage_interval = 800;
 285   6                                                      sensor_3rdstage_count = 0;
 286   6                                                      sensor_3rdstage_effcount = 0;                                   
 287   6                                                      }
 288   5                                              }
 289   4                                      break;
 290   4                                      }
 291   3                              
 292   3                              // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 293   3                              if((wire_broken == 0) && (wire_broken_count < 51))  
 294   3                                      {
 295   4                  if(++wire_broken_count > 50)
 296   4                                              {
C51 COMPILER V9.51   TIMER                                                                 05/29/2014 15:12:34 PAGE 6   

 297   5                                              host_stolen_alarm1_EN = 1;
 298   5                                              host_stolen_alarm2_EN = 1;      
 299   5                                              wire_broken_count = 51;
 300   5                     }
 301   4                                      }
 302   3                              else if((wire_broken == 1)&&(sensor_3rdalarm_flag == 0))
 303   3                                      {
 304   4                                      wire_broken_count = 0;
 305   4                                      host_stolen_alarm1_EN = 0;
 306   4                                      host_stolen_alarm2_EN = 0;
 307   4                                      }
 308   3                              
 309   3                              // judge whether battery has been stolen, 0.4V/4V
 310   3                              if((ADC_check_result < 0x066) && (key_rotate == 0))
 311   3                                      {
 312   4                                      battery_stolen_EN = 1;
 313   4                                      }
 314   3                              
 315   3                              }
 316   2                      }
 317   1              
 318   1              // judge whether position sensor is enable
 319   1              if(position_sensor_EN==1)               
 320   1                      {
 321   2                      // judge whether there is a LV
 322   2                      if(raised_sensor_detect == 0)   
 323   2                              {
 324   3                              // LV > 0.5s means a effective input
 325   3                              if(++raise_wire_time==10)
 326   3                                      {
 327   4                                      // flag raised, and reset fell
 328   4                                      raised_flag=1;
 329   4                                      fell_flag=0;
 330   4                                      // judge whether there once been a raised or fell.
 331   4                                      if(raised_fell_once_flag == 0)
 332   4                                              {
 333   5                                              // if no, flag raised and fell flag
 334   5                                              raised_fell_flag = 1;                                   
 335   5                                              }
 336   4                                      }               
 337   3                              }
 338   2                      else
 339   2                              {
 340   3                              raised_flag=0;
 341   3                              raised_alarm_count=0;
 342   3                              raise_wire_time=0;
 343   3                              raised_fell_flag = 0;
 344   3                              }
 345   2            // judge whether there is a LV
 346   2                      if(fell_sensor_detect==0)
 347   2                              {
 348   3                              // LV > 0.5s means a effective input
 349   3                              if(++fell_wire_time==10)        
 350   3                                      {
 351   4                                      // flag fell, and reset raised
 352   4                                      fell_flag=1;                    
 353   4                                      raised_flag=0;
 354   4                                      // judge whether there once been a raised or fell
 355   4                                      if(raised_fell_once_flag == 0)
 356   4                                              {
 357   5                                              raised_fell_flag = 1;                                   
 358   5                                              }
C51 COMPILER V9.51   TIMER                                                                 05/29/2014 15:12:34 PAGE 7   

 359   4                                      }               
 360   3                              }
 361   2                      else
 362   2                              {
 363   3                              fell_flag=0;
 364   3                              fell_alarm_count=0;
 365   3                              fell_wire_time=0;
 366   3                              raised_fell_flag = 0;
 367   3                              }
 368   2                      }
 369   1              
 370   1              // judge whether raised or fell, if yes, reset all after 10s.
 371   1              if(raised_fell_flag == 1)
 372   1                      {
 373   2                      if(++raised_fell_number >= 4000)
 374   2                              {
 375   3                              raised_fell_flag = 0;
 376   3                              raised_fell_number = 0;
 377   3                              raised_fell_once_flag = 1;
 378   3                              
 379   3                              sensor_trigger_count = 0;
 380   3                              sensor_1ststage_count = 0;
 381   3                              sensor_2ndstage_count = 0;
 382   3                              sensor_2ndstage_time = 0;
 383   3                              sensor_3rdstage_time = 0;
 384   3                              sensor_3rdstage_interval = 800;
 385   3                              sensor_3rdstage_count = 0;
 386   3                              sensor_3rdstage_effcount = 0;                                   
 387   3                              }
 388   2                      }
 389   1              
 390   1              // detect the horizontal sensor
 391   1              if(((horizontal_sensor == 0)||(sensor_detect == 0))&&(horizontal_vibration_count > 5000))
 392   1                      {
 393   2                      Delay(3);
 394   2                      if((horizontal_sensor == 0)||(sensor_detect == 0))
 395   2                              {
 396   3                              horizontal_vibration = 1;
 397   3                              horizontal_vibration_count = 0;
 398   3                              }
 399   2                      }
 400   1              if(++horizontal_vibration_count >= 5000)
 401   1                      {
 402   2                      horizontal_vibration_count = 5001;
 403   2                      horizontal_vibration = 0;
 404   2                      }
 405   1              }
 406          
 407          
 408          /*--------------------------------------------------------------------
 409                  timerT1()
 410                  ¶¨Ê±Æ÷1Ã¿´ÎÒç³öºóÖ´ÐÐµÄ²Ù×÷
 411          --------------------------------------------------------------------*/
 412          
 413          void timerT1() interrupt interrupt_timer_1_overflow
 414                  {
 415   1         // reload timer1
 416   1              TH1 = timer1_8H;                                
 417   1              TL1 = timer1_8L;
 418   1              
 419   1              // receive a tyte
 420   1              receive_byte();
C51 COMPILER V9.51   TIMER                                                                 05/29/2014 15:12:34 PAGE 8   

 421   1              
 422   1              // receive a word after every byte
 423   1              receive_word();
 424   1              
 425   1              // judge whether a byte has received successfully
 426   1              if(receive_data_finished_flag == 1)
 427   1                      {
 428   2                      receive_data_finished_flag = 0;
 429   2                      // judge which mode is received.
 430   2                      switch(received_data_buffer[2])                 
 431   2                              {
 432   3                              case ComMode_1:  
 433   3                                      {
 434   4                                      if((nearby_away_interval > 6)||(key_rotate == 1))
 435   4                                              {
 436   5                                              // if receive a ComMode_1 successfully, operation for slave nearby
 437   5                                              slave_nearby_EN = 1;
 438   5                                              nearby_away_interval = 0;                                       
 439   5                                              }
 440   4                                      leave_count = 0;
 441   4                                      
 442   4                                      // turn off vibration and position sensor
 443   4                                      sensor_EN = 0;                                                  
 444   4                                      position_sensor_EN=0;                   
 445   4                                      // reset all the flag in sensor
 446   4                                      fell_flag=0;  
 447   4                                      raised_flag=0;
 448   4                                      sensor_trigger_count = 0;
 449   4                                      sensor_1ststage_count = 0;
 450   4                                      sensor_2ndstage_count = 0;
 451   4                                      sensor_2ndstage_time = 0;
 452   4                                      sensor_3rdstage_time = 0;
 453   4                                      sensor_3rdstage_interval = 0;
 454   4                                      sensor_3rdstage_count = 0;
 455   4                                      sensor_3rdstage_effcount = 0;
 456   4                                      stolen_alarm_flag = 0;
 457   4                                      host_stolen_alarm1_EN = 0;
 458   4                                      host_stolen_alarm1_count = 0;
 459   4                                      host_stolen_alarm2_EN = 0;
 460   4                                      host_stolen_alarm2_count = 0;
 461   4                                      
 462   4                                      raised_fell_flag = 0;
 463   4                                      
 464   4                                      // reset the wire broken count
 465   4                                      wire_broken_count = 0;
 466   4                                      
 467   4                                      // reset the battery stolen flag
 468   4                                      battery_stolen_EN = 0;
 469   4                                      battery_stolen_count = 0;
 470   4                                      }
 471   3                              break;
 472   3                              }
 473   2                      }
 474   1              }
 475          
 476          /*--------------------------------------------------
 477                  InitTimer()
 478                  
 479                  ³õÊ¼»¯¶¨Ê±Æ÷T0ºÍT1
 480          ---------------------------------------------------*/
 481          
 482          void InitTimer(const tByte Tick_ms_T0, Tick_us_T1)
C51 COMPILER V9.51   TIMER                                                                 05/29/2014 15:12:34 PAGE 9   

 483                  {
 484   1              tLong Inc_T0, Inc_T1;
 485   1              tWord timer0_16, timer1_16;
 486   1              
 487   1              //¼ÆËãTimer0µÄ¼Ä´æÆ÷Öµ
 488   1              Inc_T0 = (tLong)Tick_ms_T0 * (OSC_FREQ/1000) / (tLong)OSC_PER_INST;
 489   1              timer0_16 = (tWord) (65536UL - Inc_T0);
 490   1              timer0_8H = (tByte) (timer0_16 / 256);
 491   1              timer0_8L = (tByte) (timer0_16 % 256);
 492   1              
 493   1              //¼ÆËãTimer1µÄ¼Ä´æÆ÷Öµ
 494   1              Inc_T1 = (tLong)Tick_us_T1 * (OSC_FREQ/1000000) / (tLong)OSC_PER_INST;
 495   1              timer1_16 = (tWord) (65536UL - Inc_T1);
 496   1              timer1_8H = (tByte) (timer1_16 / 256);
 497   1              timer1_8L = (tByte) (timer1_16 % 256);
 498   1              
 499   1              TMOD = 0x11;
 500   1              
 501   1              TH0 = timer0_8H;
 502   1              TL0 = timer0_8L;
 503   1              TH1 = timer1_8H;
 504   1              TL1 = timer1_8L;
 505   1      
 506   1              ET0 = 1;
 507   1              TR0 = 1;
 508   1              ET1 = 1;
 509   1              TR1 = 1;
 510   1              PT1 = 1;                        
 511   1              EA = 1;
 512   1              }
 513          
 514          /*---------------------------------------------------------------------
 515                  sEos_Go_To_Sleep()
 516                  ½«MCU½øÈëÐÝÃß×´Ì¬
 517          ----------------------------------------------------------------------*/
 518          void sEOS_Go_To_Sleep(void)
 519             {
 520   1         PCON |= 0x01;    // Enter idle mode (generic 8051 version)
 521   1         }
 522                  
 523          /*---------------------------------------------------
 524                  end of file
 525          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    994    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     57      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     26    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
