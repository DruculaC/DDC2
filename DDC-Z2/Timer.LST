C51 COMPILER V9.51   TIMER                                                                 06/04/2014 15:22:55 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN Timer.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Timer.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*---------------------------------------------------
   2                  Timer.c (v1.00)
   3                  
   4                  Timer functions
   5          ---------------------------------------------------*/   
   6          
   7          #include "main.h"
   8          #include "port.h"
   9          
  10          #include "Timer.h"
  11          #include "communication.h"
  12          #include "voice.h"
  13          #include "Delay.h"
  14          #include "Battery.h"
  15          #include "AD.h"
  16          #include "Other.h"
  17          #include "operation.h"
  18          
  19          // ------ Public variable declarations -----------------------------
  20          bit stolen_alarm_flag = 0;                                      // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  21          bit host_stolen_speech_EN = 0;                  // when host been touch 3 times, enable 3rd alarm voice.
  22          bit battery_check=0;                                                    // 2ÖÃ1Ê±£¬Ö´ÐÐÒ»´ÎµçÁ¿×ª»»£¬Ö´ÐÐÍêºó£¬½«ÆäÖÃ0
  23          bit position_sensor_EN=0;               //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  24          bit slave_away_speech_EN=0;      //ÅÐ¶Ï¸½»úÀë¿ªºó£¬ÓïÒôÌáÊ¾£¬ÔÚmainÀïÃæ²Ù×÷
  25          bit magnet_CW_EN = 0;                                   //µç´ÅÌúË³Ê±Õë×ª¶¯Ê¹ÄÜ£¬×ª¶¯Ò»´Îºó¸´Î»Îª0
  26          bit magnet_ACW_EN=0;                                            //µç´ÅÌúÄæÊ±Õë×ª¶¯Ê¹ÄÜ£¬×ª¶¯Ò»´Îºó¸´Î»Îª0
  27          bit comm_whole_control=0;                               //Í¨ÐÅ×Ü¿ª¹Ø£¬0¹Ø±ÕÍ¨ÐÅ£¬1´ò¿ªÍ¨ÐÅ
  28          tWord host_stolen_speech_count=0;   //ÅÐ¶ÏÖ÷»ú±»µÁºó£¬ÓïÒôÌáÊ¾µÄ´ÎÊý
  29          bit slave_nearby_speech_EN=0;       //ÅÐ¶Ï¸½½ü¿¿½üºó£¬ÓïÒôÌáÊ¾£¬ÔÚmainÀïÃæ²Ù×÷
  30          bit host_stolen_alarm1_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  31          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  32          tByte host_stolen_alarm1_count = 0;             //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  33          tByte host_stolen_alarm2_count = 0;             //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  34          bit fell_flag=0;                                                //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  35          bit slave_away = 1;                                     // flag for slave, 1 means away, 0 means nearby
  36          tByte leave_count=0;                                    // increment every 2s, reset for every success communication
  37          bit raised_flag=0;                                      //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  38          tByte sensor_2ndstage_LV_time=0;        //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  39          tByte sensor_2ndstage_count = 0;                //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  40          tByte host_2ndtouch_speech_count = 0;           //Ö÷»ú±»µÚ¶þ´Î´¥Åöºó£¬ÓïÒôÌáÊ¾µÄ´ÎÊý
  41          tWord sensor_3rdstage_time = 0;                 //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  42          tByte sensor_3rdstage_effcount = 0;             //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  43          tByte sensor_3rdstage_count = 0;                        //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  44          tWord sensor_3rdstage_interval = 0;             //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  45          bit host_touch_speech_EN = 0;                           //µÚÒ»´Î´¥ÅöºóÓïÒôÊ¹ÄÜ
  46          bit host_2ndtouch_speech_EN = 0;                        //µÚ¶þ´Î´¥ÅöºóÓïÒôÊ¹ÄÜ
  47          bit raised_fell_flag = 0;                                       //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  48          tByte sensor_trigger_count=0;           //´«¸ÐÆ÷´¥·¢¼ÆÊý
  49          tWord sensor_2ndstage_time=0;           //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  50          tByte sensor_1ststage_count=0;  //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
  51          tByte nearby_away_interval = 0;         //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  52          bit magnet_ACW_flag=0;
  53          
C51 COMPILER V9.51   TIMER                                                                 06/04/2014 15:22:55 PAGE 2   

  54          // ------ Private variable definitions -----------------------------
  55          tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;               // register value of timer0 and timer1, caculated from 
             -InitTimer()
  56          
  57          tByte host_touch_speech_count=0;
  58          tByte host_touched_flag=0;                      //Ö÷»ú±»´¥ÅöºóÖÃ1£¬½øÐÐºóÃæµÄ´«¸ÐÆ÷ÅÐ¶Ï
  59          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  60          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  61          tWord timer0_count=0;           // counter for timer0, increment every ticket                   
  62          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};             //½ÓÊÕÊý¾Ý»º´æ
  63          bit receive_data_finished_flag = 0;             //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  64          tByte data_count = 0;                           //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  65          tByte one_receive_byte = 0;             //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  66          tByte one_receive_byte_count = 0;                       //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  67          bit receive_wire_flag = 1;              //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
  68          tByte receive_HV_count = 0;             //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  69          tByte receive_LV_count = 0;             //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  70          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  71          tByte raise_wire_time=0;                        //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  72          tWord raised_fell_number = 0;                           //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  73          bit raised_fell_once_flag = 0;                  //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  74          tByte key_rotated_on_flag=0;                    //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  75          tByte slave_nearby_speech_count=0;
  76          tByte slave_away_speech_count=0;
  77          tWord ADC_check_result = 0;             //×÷ÎªAD¼ì²âÖµ
  78          bit slave_nearby_EN = 0;                        // ×÷Îªslave¿¿½üºó²Ù×÷µÄÊ¹ÄÜ
  79          tByte slave_nearby_operation_count = 0; // ×÷Îªslave¿¿½üºó²Ù×÷µÄ´ÎÊý
  80          tByte wire_broken_count = 0;            // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  81          bit battery_stolen_EN = 0;                      // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  82          tByte battery_stolen_count = 0; // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  83          bit horizontal_vibration = 0;           // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  84          tWord horizontal_vibration_count = 0;   //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  85          bit vibration_flag = 0;
  86          tWord vibration_count = 0;
  87          bit sensor_3rdalarm_flag = 0;
  88          tByte IDkey5 = IDkey0^IDkey1^IDkey2^IDkey3^IDkey4;              // ÓÉÇ°5Î»ÃÜÂë×é³ÉµÄÒì»ò
  89          bit IDkey_flag = 0;                     // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ýºóÖÃ1£¬
  90          tByte IDkey_count = 0;          // ID¿¨ÈÏÖ¤Í¨¹ýºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  91          bit ADC_timecount_EN = 0;       // ADCÆô¶¯Ê¹ÄÜ
  92          tWord ADC_timecount = 0;
  93          extern bit BAT_Lowflag;
  94          bit sensor_EN = 0;
  95          tByte enable_sensor_delay_count = 0;            // ´«¸ÐÆ÷ÑÓ³ÙµÄÊ±¼ä
  96          extern bit enable_sensor_delayEN;
  97          
  98          /*------------------------------------------------------------------
  99                  timerT0()
 100                  operation every ticket.
 101          --------------------------------------------------------------------*/
 102          
 103          void timer0() interrupt interrupt_timer_0_overflow
 104                  {
 105   1              // manually reload timer0 configuration
 106   1              TH0 = timer0_8H;
 107   1              TL0 = timer0_8L;
 108   1              
 109   1              // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 110   1              if(++timer0_count >= 2000)
C51 COMPILER V9.51   TIMER                                                                 06/04/2014 15:22:55 PAGE 3   

 111   1                      {
 112   2                      // reset timer0 ticket counter every 2s
 113   2                      timer0_count=0;
 114   2                      
 115   2      
 116   2                      if(ADC_timecount_EN == 1)
 117   2                              {
 118   3                              if(++ADC_timecount >= 1)
 119   3                                      {
 120   4                                      // detect the battery voltage
 121   4                                      ADC_check_result = GetADCResult(6);
 122   4                                      ADC_timecount = 0;
 123   4                                      }
 124   3                              }
 125   2                      
 126   2                      if(IDkey_flag == 1)
 127   2                              {
 128   3                              if(++IDkey_count >= 10)
 129   3                                      {
 130   4                                      IDkey_count = 0;
 131   4                                      IDkey_flag = 0;
 132   4                                      enable_sensor();                                                        
 133   4                                      }                       
 134   3                              }
 135   2                      
 136   2                      if((enable_sensor_delayEN == 1)&&(key_rotate == 0))
 137   2                              {
 138   3                              if(++enable_sensor_delay_count >= 15)
 139   3                                      {
 140   4                                      enable_sensor_delay_count = 0;
 141   4                                      enable_sensor_delayEN = 0;
 142   4                                      enable_sensor();
 143   4                                      }
 144   3                              }
 145   2                      }
 146   1              
 147   1              if(IDkey_flag == 1)
 148   1                      {
 149   2                      // detect whether key is rotated on,  
 150   2                      if((key_rotate == 1)&&(key_rotated_on_flag == 0))               
 151   2                              {
 152   3                              Delay(5);
 153   3                              // anti-trigger, Delay(5) confirm the key rotation.
 154   3                              if(key_rotate == 1)
 155   3                                      {
 156   4                                      slave_nearby_operation();
 157   4                                      // flag key rotation status
 158   4                                      key_rotated_on_flag = 1;
 159   4                                      
 160   4                                      IDkey_count = 0;
 161   4                                      IDkey_flag = 0;
 162   4                                      }
 163   3                              }               
 164   2                      }
 165   1                      
 166   1              
 167   1              // detect whether key is rotated off
 168   1              if((key_rotate == 0)&&(key_rotated_on_flag == 1))
 169   1                      {
 170   2                      if((vibration_flag == 0)&&(wheeled_flag == 0))
 171   2                              {
 172   3                              Delay(5);
C51 COMPILER V9.51   TIMER                                                                 06/04/2014 15:22:55 PAGE 4   

 173   3                              if(key_rotate == 0)
 174   3                                      {
 175   4                                      // handle with battery status
 176   4                                      verifybattery(ADC_check_result);
 177   4                                      // reset key rotation flag
 178   4                                      key_rotated_on_flag=0;
 179   4                                      
 180   4                                      slave_away_operation();
 181   4                                      }
 182   3                              }                               
 183   2                      }
 184   1              
 185   1              if(vibration_flag == 1)
 186   1                      {
 187   2                      if(++vibration_count > 2000)
 188   2                              {
 189   3                              vibration_flag = 0;
 190   3                              vibration_count = 0;
 191   3                              }
 192   2                      }
 193   1                      
 194   1              if((sensor_detect == 0)||(horizontal_sensor == 0))
 195   1                      {
 196   2                      vibration_flag = 1;
 197   2                      }
 198   1      
 199   1              // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 200   1              if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 201   1                      {
 202   2                      stolen_alarm_flag = 1;
 203   2                      if(key_rotate == 0)
 204   2                              {
 205   3                              stolen_alarm_speech1();
 206   3                              }
 207   2                      if(++host_stolen_alarm1_count >= 4)
 208   2                              {
 209   3                              host_stolen_alarm1_count = 0;
 210   3                              host_stolen_alarm1_EN = 0;
 211   3                              stolen_alarm_flag = 0;
 212   3                              sensor_3rdalarm_flag = 0;
 213   3                              }
 214   2                      }
 215   1              if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 216   1                      {
 217   2                      stolen_alarm_flag = 1;
 218   2                      if(key_rotate == 0)
 219   2                              {
 220   3                              stolen_alarm_speech2();
 221   3                              }
 222   2                      if(++host_stolen_alarm2_count >= 4)
 223   2                              {
 224   3                              host_stolen_alarm2_count = 0;
 225   3                              host_stolen_alarm2_EN = 0;
 226   3                              stolen_alarm_flag = 0;
 227   3                              sensor_3rdalarm_flag = 0;
 228   3                              }
 229   2                      }
 230   1                                      
 231   1      
 232   1              // judge host is fell or raised every 1ms?
 233   1              if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 234   1                      {
C51 COMPILER V9.51   TIMER                                                                 06/04/2014 15:22:55 PAGE 5   

 235   2                      // judge vibration sensor is enable?
 236   2                      if(sensor_EN == 1)      
 237   2                              {                       
 238   3                              // sensor trigger status, 0, 1 or 2?
 239   3                              switch(sensor_trigger_count)
 240   3                                      {
 241   4                                      // case 0, it means host is in waiting status. waiting for first touch.
 242   4                                      case 0:
 243   4                                              {
 244   5                                              
 245   5                                              // judge host been touched and also not in vibration alarm
 246   5      //                                      if((sensor_detect == 0)&&(stolen_alarm_flag == 0)&&(transmiter_EN == 1))                
 247   5                                              if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0))          
 248   5                                                      {
 249   6                                                      // judge LV is more than 2ms, if yes, it means a effective touch
 250   6                                                      if(++sensor_1ststage_count >= 2)                        
 251   6                                                              {
 252   7                                                              sensor_1ststage_count=0;
 253   7                                                              
 254   7                                                              // sensor trigge status progress to case 1.
 255   7                                                              sensor_trigger_count = 1;
 256   7                                                              // alarm speech for first touoch
 257   7                                                              host_touch_speech();
 258   7                           }
 259   6                                                      }
 260   5                                              else
 261   5                                                      {
 262   6                                                      // if no LV, reset the count.
 263   6                                                      sensor_1ststage_count = 0;
 264   6                                                      }
 265   5                                              }
 266   4                                      break;
 267   4                                      
 268   4                                      // waiting for next touch, 
 269   4                                      case 1:
 270   4                                              {
 271   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 272   5                                                      {
 273   6                                                      // LV for 2s, means a effective touch
 274   6                                                      if(++sensor_2ndstage_count >= 2)
 275   6                                                              {
 276   7                                                              sensor_2ndstage_count = 0;
 277   7                                                              sensor_trigger_count = 2;
 278   7                                                              host_2ndtouch_speech_count = 0;
 279   7                                                              // alarm speech for 2nd touch
 280   7                                                              host_2ndtouch_speech();
 281   7                                                              }
 282   6                                                      }
 283   5                                              else
 284   5                                                      {
 285   6                                                      sensor_2ndstage_count = 0;
 286   6                                                      }
 287   5                                              
 288   5                                              // if there is no touch in 4s, reset sensor trigger status, etc.
 289   5                                              if(++sensor_2ndstage_time >= 4000)
 290   5                                                      {
 291   6                                                      sensor_trigger_count = 0;
 292   6                                                      sensor_2ndstage_count = 0;
 293   6                                                      sensor_1ststage_count = 0;
 294   6                                                      sensor_2ndstage_time = 0;
 295   6                                                      }
 296   5                                              }
C51 COMPILER V9.51   TIMER                                                                 06/04/2014 15:22:55 PAGE 6   

 297   4                                      break;
 298   4                                      
 299   4                                      // waiting for 3rd touch
 300   4                                      case 2:
 301   4                                              {
 302   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 303   5                                                      {
 304   6                                                      // 2s LV is a effective touch
 305   6                                                      if(++sensor_3rdstage_count >= 1)
 306   6                                                              {
 307   7                                                              sensor_3rdstage_count = 0;
 308   7                                                              // stolen alarm speech enable
 309   7                                                              host_stolen_alarm1_EN = 1;
 310   7                                                              host_stolen_alarm2_EN = 1;      
 311   7                                                              sensor_3rdalarm_flag = 1;                                                       
 312   7                                                              }
 313   6                                                      }
 314   5                                              else
 315   5                                                      {
 316   6                                                      sensor_3rdstage_count = 0;
 317   6                                                      }
 318   5                                              
 319   5                                              // if there is no touch in 4s, reset all.
 320   5                                              if(++sensor_3rdstage_time >= 4000)
 321   5                                                      {
 322   6                                                      sensor_trigger_count = 0;
 323   6                                                      sensor_1ststage_count = 0;
 324   6                                                      sensor_2ndstage_count = 0;
 325   6                                                      sensor_2ndstage_time = 0;
 326   6                                                      sensor_3rdstage_time = 0;
 327   6                                                      sensor_3rdstage_interval = 800;
 328   6                                                      sensor_3rdstage_count = 0;
 329   6                                                      sensor_3rdstage_effcount = 0;                                   
 330   6                                                      }
 331   5                                              }
 332   4                                      break;
 333   4                                      }
 334   3                              
 335   3                              // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 336   3                              if((wire_broken == 0) && (wire_broken_count < 51))  
 337   3                                      {
 338   4                  if(++wire_broken_count > 50)
 339   4                                              {
 340   5                                              host_stolen_alarm1_EN = 1;
 341   5                                              host_stolen_alarm2_EN = 1;      
 342   5                                              wire_broken_count = 51;
 343   5                     }
 344   4                                      }
 345   3                              else if((wire_broken == 1)&&(sensor_3rdalarm_flag == 0))
 346   3                                      {
 347   4                                      wire_broken_count = 0;
 348   4                                      host_stolen_alarm1_EN = 0;
 349   4                                      host_stolen_alarm2_EN = 0;
 350   4                                      }
 351   3                              
 352   3                              // judge whether battery has been stolen, 0.4V/4V
 353   3                              if((ADC_check_result < 0x066) && (key_rotate == 0))
 354   3                                      {
 355   4                                      battery_stolen_EN = 1;
 356   4                                      }
 357   3                              
 358   3                              }
C51 COMPILER V9.51   TIMER                                                                 06/04/2014 15:22:55 PAGE 7   

 359   2                      }
 360   1              
 361   1              // judge whether position sensor is enable
 362   1              if(position_sensor_EN==1)               
 363   1                      {
 364   2                      // judge whether there is a LV
 365   2                      if(raised_sensor_detect == 0)   
 366   2                              {
 367   3                              // LV > 0.5s means a effective input
 368   3                              if(++raise_wire_time==10)
 369   3                                      {
 370   4                                      // flag raised, and reset fell
 371   4                                      raised_flag=1;
 372   4                                      fell_flag=0;
 373   4                                      // judge whether there once been a raised or fell.
 374   4                                      if(raised_fell_once_flag == 0)
 375   4                                              {
 376   5                                              // if no, flag raised and fell flag
 377   5                                              raised_fell_flag = 1;                                   
 378   5                                              }
 379   4                                      }               
 380   3                              }
 381   2                      else
 382   2                              {
 383   3                              raised_flag=0;
 384   3                              raised_alarm_count=0;
 385   3                              raise_wire_time=0;
 386   3                              raised_fell_flag = 0;
 387   3                              }
 388   2            // judge whether there is a LV
 389   2                      if(fell_sensor_detect==0)
 390   2                              {
 391   3                              // LV > 0.5s means a effective input
 392   3                              if(++fell_wire_time==10)        
 393   3                                      {
 394   4                                      // flag fell, and reset raised
 395   4                                      fell_flag=1;                    
 396   4                                      raised_flag=0;
 397   4                                      // judge whether there once been a raised or fell
 398   4                                      if(raised_fell_once_flag == 0)
 399   4                                              {
 400   5                                              raised_fell_flag = 1;                                   
 401   5                                              }
 402   4                                      }               
 403   3                              }
 404   2                      else
 405   2                              {
 406   3                              fell_flag=0;
 407   3                              fell_alarm_count=0;
 408   3                              fell_wire_time=0;
 409   3                              raised_fell_flag = 0;
 410   3                              }
 411   2                      }
 412   1              
 413   1              // judge whether raised or fell, if yes, reset all after 10s.
 414   1              if(raised_fell_flag == 1)
 415   1                      {
 416   2                      if(++raised_fell_number >= 4000)
 417   2                              {
 418   3                              raised_fell_flag = 0;
 419   3                              raised_fell_number = 0;
 420   3                              raised_fell_once_flag = 1;
C51 COMPILER V9.51   TIMER                                                                 06/04/2014 15:22:55 PAGE 8   

 421   3                              
 422   3                              sensor_trigger_count = 0;
 423   3                              sensor_1ststage_count = 0;
 424   3                              sensor_2ndstage_count = 0;
 425   3                              sensor_2ndstage_time = 0;
 426   3                              sensor_3rdstage_time = 0;
 427   3                              sensor_3rdstage_interval = 800;
 428   3                              sensor_3rdstage_count = 0;
 429   3                              sensor_3rdstage_effcount = 0;                                   
 430   3                              }
 431   2                      }
 432   1              
 433   1              // detect the horizontal sensor
 434   1              if(((horizontal_sensor == 0)||(sensor_detect == 0))&&(horizontal_vibration_count > 5000))
 435   1                      {
 436   2                      Delay(3);
 437   2                      if((horizontal_sensor == 0)||(sensor_detect == 0))
 438   2                              {
 439   3                              horizontal_vibration = 1;
 440   3                              horizontal_vibration_count = 0;
 441   3                              }
 442   2                      }
 443   1              if(++horizontal_vibration_count >= 5000)
 444   1                      {
 445   2                      horizontal_vibration_count = 5001;
 446   2                      horizontal_vibration = 0;
 447   2                      }
 448   1              }
 449          
 450          /*-----------------------------------------------
 451                  ÓÃUART¶Ë¿Ú½ÓÊÕÊý¾Ý£¬9600²¨ÌØÂÊ£¬ÊÕµ½ºó±íÊ¾
 452                  ÈÏÖ¤ÒÑÍ¨¹ý¡£
 453          -----------------------------------------------*/
 454          void uart_isr() interrupt 4 //ÖÐ¶Ï½ÓÊÕÊý¾Ý
 455                  {
 456   1              if(RI)
 457   1                      {
 458   2                      RI=0;
 459   2      
 460   2                      // assign one byte to buffer[i] 
 461   2                      received_data_buffer[data_count] = SBUF;
 462   2                      
 463   2                      // judge whether buffer[0] is CmdHead
 464   2                      if((data_count == 0) && (received_data_buffer[0] == IDkey0))
 465   2                              {
 466   3                              data_count = 1;
 467   3                              }
 468   2                      else if((data_count == 1) && (received_data_buffer[1] == IDkey1))
 469   2                              {
 470   3                              data_count = 2;
 471   3                              }
 472   2                      else if((data_count == 2) && (received_data_buffer[2] == IDkey2))
 473   2                              {
 474   3                              data_count = 3;
 475   3                              }
 476   2                      else if((data_count == 3) && (received_data_buffer[3] == IDkey3))
 477   2                              {
 478   3                              data_count = 4;
 479   3                              }
 480   2                      else if((data_count == 4) && (received_data_buffer[4] == IDkey4))
 481   2                              {
 482   3                              data_count = 5;
C51 COMPILER V9.51   TIMER                                                                 06/04/2014 15:22:55 PAGE 9   

 483   3                              }
 484   2                      else if((data_count == 5) && (received_data_buffer[5] == IDkey5))
 485   2                              {
 486   3                              data_count = 0; 
 487   3                              IDkey_flag = 1;
 488   3                              IDkey_count = 0;
 489   3                              disable_sensor();
 490   3                              }
 491   2                      else 
 492   2                              {
 493   3                              data_count = 0;
 494   3                              }
 495   2                      }
 496   1              }
 497          
 498          /*--------------------------------------------------------------------
 499                  timerT1()
 500                  ¶¨Ê±Æ÷1Ã¿´ÎÒç³öºóÖ´ÐÐµÄ²Ù×÷
 501          
 502          void timerT1() interrupt interrupt_timer_1_overflow
 503                  {
 504             // reload timer1
 505                  TH1 = timer1_8H;                                
 506                  TL1 = timer1_8L;
 507                  
 508                  // receive a tyte
 509                  receive_byte();
 510                  
 511                  // receive a word after every byte
 512                  receive_word();
 513                  
 514                  // judge whether a byte has received successfully
 515                  if(receive_data_finished_flag == 1)
 516                          {
 517                          receive_data_finished_flag = 0;
 518                          // judge which mode is received.
 519                          switch(received_data_buffer[2])                 
 520                                  {
 521                                  case ComMode_1:  
 522                                          {
 523                                          if((nearby_away_interval > 6)||(key_rotate == 1))
 524                                                  {
 525                                                  // if receive a ComMode_1 successfully, operation for slave nearby
 526                                                  slave_nearby_EN = 1;
 527                                                  nearby_away_interval = 0;                                       
 528                                                  }
 529                                          leave_count = 0;
 530                                          
 531                                          // turn off vibration and position sensor
 532                                          sensor_EN = 0;                                                  
 533                                          position_sensor_EN=0;                   
 534                                          // reset all the flag in sensor
 535                                          fell_flag=0;  
 536                                          raised_flag=0;
 537                                          sensor_trigger_count = 0;
 538                                          sensor_1ststage_count = 0;
 539                                          sensor_2ndstage_count = 0;
 540                                          sensor_2ndstage_time = 0;
 541                                          sensor_3rdstage_time = 0;
 542                                          sensor_3rdstage_interval = 0;
 543                                          sensor_3rdstage_count = 0;
 544                                          sensor_3rdstage_effcount = 0;
C51 COMPILER V9.51   TIMER                                                                 06/04/2014 15:22:55 PAGE 10  

 545                                          stolen_alarm_flag = 0;
 546                                          host_stolen_alarm1_EN = 0;
 547                                          host_stolen_alarm1_count = 0;
 548                                          host_stolen_alarm2_EN = 0;
 549                                          host_stolen_alarm2_count = 0;
 550                                          
 551                                          raised_fell_flag = 0;
 552                                          
 553                                          // reset the wire broken count
 554                                          wire_broken_count = 0;
 555                                          
 556                                          // reset the battery stolen flag
 557                                          battery_stolen_EN = 0;
 558                                          battery_stolen_count = 0;
 559                                          }
 560                                  break;
 561                                  }
 562                          }
 563                  }
 564          --------------------------------------------------------------------*/
 565          
 566          /*--------------------------------------------------
 567                  InitTimer()
 568                  
 569                  ³õÊ¼»¯¶¨Ê±Æ÷T0ºÍT1
 570          
 571          void InitTimer(const tByte Tick_ms_T0, Tick_us_T1)
 572                  {
 573                  tLong Inc_T0, Inc_T1;
 574                  tWord timer0_16, timer1_16;
 575                  
 576                  //¼ÆËãTimer0µÄ¼Ä´æÆ÷Öµ
 577                  Inc_T0 = (tLong)Tick_ms_T0 * (OSC_FREQ/1000) / (tLong)OSC_PER_INST;
 578                  timer0_16 = (tWord) (65536UL - Inc_T0);
 579                  timer0_8H = (tByte) (timer0_16 / 256);
 580                  timer0_8L = (tByte) (timer0_16 % 256);
 581                  
 582                  //¼ÆËãTimer1µÄ¼Ä´æÆ÷Öµ
 583                  Inc_T1 = (tLong)Tick_us_T1 * (OSC_FREQ/1000000) / (tLong)OSC_PER_INST;
 584                  timer1_16 = (tWord) (65536UL - Inc_T1);
 585                  timer1_8H = (tByte) (timer1_16 / 256);
 586                  timer1_8L = (tByte) (timer1_16 % 256);
 587                  
 588                  TMOD = 0x11;
 589                  
 590                  TH0 = timer0_8H;
 591                  TL0 = timer0_8L;
 592                  TH1 = timer1_8H;
 593                  TL1 = timer1_8L;
 594          
 595                  ET0 = 1;
 596                  TR0 = 1;
 597                  ET1 = 1;
 598                  TR1 = 1;
 599                  PT1 = 1;                        
 600                  EA = 1;
 601                  }
 602          ---------------------------------------------------*/
 603          
 604          /*-----------------------------------------------------------------
 605                  ³õÊ¼»¯T0£¬ÔÚ³õÊ¼»¯ÁË´®¿ÚÖ®ºó
 606          -----------------------------------------------------------------*/
C51 COMPILER V9.51   TIMER                                                                 06/04/2014 15:22:55 PAGE 11  

 607          void InitT0(const tByte Tick_ms_T0)
 608          {
 609   1              tLong Inc_T0;
 610   1              tWord timer0_16;
 611   1              
 612   1              //¼ÆËãTimer0µÄ¼Ä´æÆ÷Öµ
 613   1              Inc_T0 = (tLong)Tick_ms_T0 * (OSC_FREQ/1000) / (tLong)OSC_PER_INST;
 614   1              timer0_16 = (tWord) (65536UL - Inc_T0);
 615   1              timer0_8H = (tByte) (timer0_16 / 256);
 616   1              timer0_8L = (tByte) (timer0_16 % 256);
 617   1              TMOD = 0x21;
 618   1              TR0=1;
 619   1      }
 620          
 621          /*---------------------------------------------------------------------
 622                  sEos_Go_To_Sleep()
 623                  ½«MCU½øÈëÐÝÃß×´Ì¬
 624          ----------------------------------------------------------------------*/
 625          void sEOS_Go_To_Sleep(void)
 626             {
 627   1         PCON |= 0x01;    // Enter idle mode (generic 8051 version)
 628   1         }
 629                  
 630          /*---------------------------------------------------
 631                  end of file
 632          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1012    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     62       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     29    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
